---
import Main from '../layouts/Main.astro'
import ProductCard from '../components/ui/ProductCard.astro'
import { wordpressService } from '../services/wordpress'

// Obtener el n√∫mero de p√°gina actual desde los par√°metros de URL
const currentPage = Number(Astro.url.searchParams.get('page') || '1')
const productsPerPage = 12 // Mostrar 12 productos por p√°gina (3x4 en desktop)

// Obtener productos con paginaci√≥n
let products: any[] = []
let totalPages = 1
let totalItems = 0

try {
	console.log(`üõí Cargando p√°gina ${currentPage} de la tienda...`)
	
	const result = await wordpressService.getProductsWithPagination({
		per_page: productsPerPage,
		page: currentPage,
		status: 'publish',
		orderby: 'date',
		order: 'desc'
	})
	
	products = result.products
	totalPages = result.totalPages
	totalItems = result.totalItems
	
	console.log(`‚úÖ Productos cargados: ${products.length} de ${totalItems} total (${totalPages} p√°ginas)`)
	
} catch (error) {
	console.error('‚ùå Error loading products:', error)
	products = []
}

const title = `Tienda${currentPage > 1 ? ` - P√°gina ${currentPage}` : ''} - Store for Devs`
const description = 'Descubre todos nuestros productos para desarrolladores. Hoodies, camisetas y m√°s con los mejores dise√±os de programaci√≥n.'
---

<Main title={title} description={description}>
  <!-- Grid de productos -->
  {products.length > 0 ? (
    <div class="products-container">
      {products.map((product) => {
        // Obtener imagen del producto
        const productImage = (product.image && product.image.length > 0) 
          ? product.image[0] 
          : 'https://placehold.co/300'
        
        // Calcular precio para mostrar
        const displayPrice = product.onSale && product.salePrice && product.salePrice !== '0'
          ? `$${product.salePrice}`
          : `$${product.price || '0'}`
        
        const originalPrice = product.onSale && product.salePrice && product.salePrice !== '0'
          ? `$${product.price}`
          : undefined

        return (
          <ProductCard
            img={productImage}
            category={product.category || 'Sin categor√≠a'}
            title={product.name || 'Producto'}
            price={displayPrice}
            originalPrice={originalPrice}
            href={`/producto/${product.slug}`}
          />
        )
      })}
    </div>
  ) : (
    <div class="no-products">
      <i class="i-carbon-shopping-bag text-6xl text-gray-400"></i>
      <h3>No se encontraron productos</h3>
      <p>Lo sentimos, no hay productos disponibles en esta p√°gina.</p>
    </div>
  )}

  <!-- Paginaci√≥n -->
  {totalPages > 1 && (
    <nav class="pagination">
      <div class="pagination-container">
        <!-- P√°gina anterior -->
        {currentPage > 1 && (
          <a href={currentPage === 2 ? '/tienda' : `/tienda?page=${currentPage - 1}`} class="pagination-btn prev">
            <i class="i-carbon-chevron-left"></i>
            Anterior
          </a>
        )}

        <!-- N√∫meros de p√°gina -->
        <div class="pagination-numbers">
          {Array.from({ length: totalPages }, (_, i) => {
            const page = i + 1
            const isActive = page === currentPage
            const href = page === 1 ? '/tienda' : `/tienda?page=${page}`
            
            return isActive ? (
              <span class="pagination-number active">{page}</span>
            ) : (
              <a href={href} class="pagination-number">{page}</a>
            )
          })}
        </div>

        <!-- P√°gina siguiente -->
        {currentPage < totalPages && (
          <a href={`/tienda?page=${currentPage + 1}`} class="pagination-btn next">
            Siguiente
            <i class="i-carbon-chevron-right"></i>
          </a>
        )}
      </div>
    </nav>
  )}
</Main>

<style>
	/* Grid de productos */
	.products-container {
		display: grid;
		grid-template-columns: repeat(2, 1fr);
		gap: 15px;
		margin: 3rem 0;
	}

	/* Sin productos */
	.no-products {
		text-align: center;
		padding: 4rem 0;
		color: var(--primary-light);

		i {
			color: var(--secondary-light);
			margin-bottom: 1rem;
		}

		h3 {
			margin: 1rem 0;
			font-size: 1.5rem;
			color: var(--primary-light);
		}

		p {
			color: var(--secondary-light);
		}
	}

	/* Paginaci√≥n */
	.pagination {
		display: flex;
		justify-content: center;
		margin: 3rem 0;

		.pagination-container {
			display: flex;
			align-items: center;
			gap: 0.5rem;
			flex-wrap: wrap;
			justify-content: center;
		}

		.pagination-btn {
			display: flex;
			align-items: center;
			gap: 0.5rem;
			padding: 0.75rem 1rem;
			background: var(--secondary-dark);
			color: var(--primary-light);
			text-decoration: none;
			border-radius: 6px;
			font-size: 0.9rem;
			transition: all 0.3s ease;

			&:hover {
				background: var(--primary);
				color: var(--primary-dark);
			}

			i {
				font-size: 1rem;
			}
		}

		.pagination-numbers {
			display: flex;
			align-items: center;
			gap: 0.25rem;
			margin: 0 0.5rem;
		}

		.pagination-number {
			display: flex;
			align-items: center;
			justify-content: center;
			width: 40px;
			height: 40px;
			background: var(--secondary-dark);
			color: var(--primary-light);
			text-decoration: none;
			border-radius: 6px;
			font-size: 0.9rem;
			transition: all 0.3s ease;

			&:hover {
				background: var(--primary);
				color: var(--primary-dark);
			}

			&.active {
				background: var(--primary);
				color: var(--primary-dark);
				font-weight: 600;
			}
		}

		.pagination-ellipsis {
			color: var(--secondary-light);
			padding: 0 0.5rem;
		}
	}

	/* Responsive */
	@media (max-width: 768px) {
		.store-header {
			.store-stats {
				flex-direction: column;
				gap: 0.5rem;
			}
		}

		.pagination {
			.pagination-container {
				flex-direction: column;
				gap: 1rem;
			}

			.pagination-numbers {
				order: -1;
			}
		}
	}

	/* Tablet */
	@media (width >= 768px) {
		.store-header h1 {
			font-size: 2.5rem;
		}

		.products-container {
			grid-template-columns: repeat(3, 1fr);
			gap: 20px;
		}
	}

	/* Desktop */
	@media (width >= 1024px) {
		.store-header h1 {
			font-size: 3rem;
		}

		.products-container {
			grid-template-columns: repeat(4, 1fr);
			gap: 20px;
		}
	}

	/* Large Desktop */
	@media (width >= 1200px) {
		.products-container {
			gap: 30px;
		}
	}
</style>
